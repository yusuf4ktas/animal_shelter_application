@* Views/Animal/SpecificAnimal.cshtml *@
@model animal_shelter_app.Models.AnimalInformation
@using System.Text.Json

@{
    ViewData["Title"] = "Animal Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    string bodyClass = Model.Species?.ToLower() switch
    {
        "dog" => "dog-theme",
        "cat" => "cat-theme",
        "bird" => "bird-theme",
        "hamster" => "hamster-theme",
        "rabbit" => "rabbit-theme",
        _ => "default-theme"
    };

    ViewBag.BodyClass = bodyClass;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Animal Profile - @Model.Species</title>

    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        body {
            min-height: 100vh;
            display: grid;
            place-items: center;
            font-family: "Martel Sans", sans-serif;
        }

        h1 {
            font-size: 5.25vmin;
            text-align: center;
            color: white;
        }

        p {
            font-size: max(10pt, 2.5vmin);
            line-height: 1.4;
            color: #0e390e;
            margin-bottom: 1.5rem;
        }

        .wrap {
            display: flex;
            flex-wrap: nowrap;
            justify-content: space-between;
            width: 85vmin;
            height: 65vmin;
            margin: 2rem auto;
            border: 8px solid;
            transition: 0.3s ease-in-out;
            position: relative;
            overflow: hidden;
        }

        .overlay {
            position: relative;
            display: flex;
            width: 100%;
            height: 100%;
            padding: 1rem 0.75rem;
            transition: 0.4s ease-in-out;
            z-index: 1;
        }

        .overlay-content {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            width: 15vmin;
            height: 100%;
            padding: 0.5rem 0 0 0.5rem;
            border: 3px solid;
            border-image: linear-gradient(to bottom, #aea724 5%, forestgreen 35% 65%, #aea724 95%) 0 0 0 100%;
            transition: 0.3s ease-in-out 0.2s;
            z-index: 1;
        }

        .image-content {
            position: absolute;
            top: 0;
            right: 0;
            width: 60vmin;
            height: 100%;
            background-image: url("https://assets.codepen.io/4787486/trees.png");
            background-size: cover;
            transition: 0.3s ease-in-out;
        }

        .text {
            position: absolute;
            top: 0;
            right: 0;
            width: 60vmin;
            height: 100%;
            padding: 3vmin 4vmin;
            background: #fff;
            box-shadow: inset 1px 1px 15px 0 rgba(0 0 0 / 0.4);
            overflow-y: scroll;
        }

        .wrap:hover .overlay {
            transform: translateX(-60vmin);
        }

        .wrap:hover .image-content {
            width: 30vmin;
        }

        .wrap:hover .overlay-content {
            border: none;
            transition-delay: 0.2s;
            transform: translateX(60vmin);
        }

        .animal-details {
            margin-top: 2rem;
            font-size: max(8pt, 2vmin);
            line-height: 1.6;
        }

        .animal-details p {
            color: white;
            margin-bottom: 0.5rem;
        }

        .adopt-button-container {
            text-align: center;
            margin-top: 2rem;
        }

        .adopt-button {
            padding: 0.8rem 2rem;
            border: none;
            border-radius: 4px;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .adopt-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        /* Tema Sınıfları */
        body.dog-theme {
            background: #FFF3E0; /* Açık sıcak krem */
        }

        .dog-theme .overlay {
            background: #EBC697; /* Sıcak karamel */
        }

        .dog-theme .wrap {
            border-image: linear-gradient(-50deg, #D4A55D, #F3E1C0, #D4A55D) 1;
        }

        .dog-theme .adopt-button {
            background: #F57C00; /* Buton vurgusu */
            color: white;
        }


        body.cat-theme {
            background: linear-gradient(to right, #FFFFFF, #E1E7EB, #A4C6D8, #FFFFFF); /* Beyaz, hafif gri ve mavi geçiş */
        }

        .cat-theme .overlay {
            background: #8AADC1; /* Light Antique Blue */
        }

        .cat-theme .wrap {
            border-image: linear-gradient(-50deg, #F5F5F5, #A3B6C1, #F5F5F5) 1; /* Hafif gri tonları */
        }

        .cat-theme .adopt-button {
            background: #839fc5; /* Light Antique Violet */
            color: white;
        }




        body.bird-theme {
            background: linear-gradient(to right, #1b7b7f, #788576, #a3e4d7, #788576, #1b7b7f); /* Yeni yeşil ve gri tonları ile gradient */
        }

        .bird-theme .overlay {
            background: #1b7b7f; /* Yeşil mavisi */
        }

        .bird-theme .wrap {
            border-image: linear-gradient(-50deg, #1b7b7f, #788576, #a3e4d7, #788576, #1b7b7f) 1; /* Yeşil-gri tonlarında */
        }

        .bird-theme .adopt-button {
            background: #62806e; /* Pembe ton */
            color: white;
        }


        body.hamster-theme {
            background: linear-gradient(to right, #f1e082, #eeeeaf, #F1E0C6, #eeeeaf, #f1e082); /* Altın sarısı ve bej tonları */
        }

        .hamster-theme .overlay {
            background: #d2a45b; 
        }

        .hamster-theme .wrap {
            border-image: linear-gradient(-50deg, #e3ad59, #e7cda4, #e3ad59) 1; /* Soluk altın ve kahverengi tonları */
        }

        .hamster-theme .adopt-button {
            background: #daa523; 
            color: white;
        }


        body.rabbit-theme {
            background: linear-gradient(to right, #e5a3a0, #f7c5c3, #F1E0C6, #f7c5c3, #e5a3a0);
        }

        .rabbit-theme .overlay {
            background: #e37873; /* Altın sarısı */
        }

        .rabbit-theme .wrap {
            border-image: linear-gradient(-50deg, #E69B98, #D0C7D8, #E69B98) 1; /* Soluk pembe-lavanta tonlarında border */
        }

        .rabbit-theme .adopt-button {
            background: #db6f6b; /* Peach rengi */
            color: white;
        }



        body.default-theme {
            background: linear-gradient(to right, #008000, #00e600, #b3ffb3, #00e600, #008000);
        }
        .default-theme .overlay { background: #186218; }
        .default-theme .wrap { border-image: linear-gradient(-50deg, green, #00b300, forestgreen, green, lightgreen, #00e600, green) 1; }
        .default-theme .adopt-button { background: #2ecc71; }
    </style>
</head>
<body class="@ViewBag.BodyClass">
    <div class="wrap">
        <div class="overlay">
            <div class="overlay-content animate slide-left delay-2">
                <h1 class="animate slide-left pop delay-4">@Model.Species</h1>
            </div>

            <div class="image-content animate slide delay-5" style="background-image: url('@Model.AnimalImage');"></div>

            <div class="dots animate">
                <div class="dot animate slide-up delay-6"></div>
                <div class="dot animate slide-up delay-7"></div>
                <div class="dot animate slide-up delay-8"></div>
            </div>
        </div>

        <div class="text container mt-4">
            <div class="row">
                <div class="col-md-6">
                    @if (!string.IsNullOrEmpty(Model.AnimalImage))
                    {
                        <img src="@Model.AnimalImage" alt="Animal Image" class="img-fluid rounded" />
                    }
                    else
                    {
                        <p>No Image Available</p>
                    }
                </div>

                <div class="col-md-6">
                    <h2>@Model.AnimalType?.AnimalSpecies</h2>
                    <p class="animal-info-item"><strong>ID:</strong> @Model.AnimalId</p>
                    <p class="animal-info-item"><strong>Age:</strong> @Model.AnimalAge</p>
                    <p class="animal-info-item"><strong>Gender:</strong> @(Model.AnimalGender ? "Female" : "Male")</p>
                    <p class="animal-info-item"><strong>Neutered:</strong> @(Model.NeuteringStatus ? "Yes" : "No")</p>
                    <p class="animal-info-item"><strong>Features:</strong> @Model.CharacteristicFeatures</p>
                    <div class="animal-info-item">
                        <strong>Chronic Disease:</strong> @(Model.HealthCondition?.ChronicDiseaseStatus == true ? "Yes" : "No")
                        @if (Model.HealthCondition?.ChronicDiseaseStatus == true)
                        {
                            <button class="btn btn-link p-0" data-bs-toggle="collapse" data-bs-target="#chronicDetails">
                                <i class="bi bi-caret-down-fill"></i> Details
                            </button>
                            <div class="collapse collapse-details" id="chronicDetails">
                                <p>@(string.IsNullOrEmpty(Model.HealthCondition.ChronicDiseaseDetails) ? "No additional details." : Model.HealthCondition.ChronicDiseaseDetails)</p>
                            </div>
                        }
                    </div>

                    <div class="animal-info-item">
                        <strong>Disability Status:</strong> @(Model.HealthCondition?.DisabilityStatus == true ? "Yes" : "No")
                        @if (Model.HealthCondition?.DisabilityStatus == true)
                        {
                            <button class="btn btn-link p-0" data-bs-toggle="collapse" data-bs-target="#disabilityDetails">
                                <i class="bi bi-caret-down-fill"></i> Details
                            </button>
                            <div class="collapse collapse-details" id="disabilityDetails">
                                <p>@(string.IsNullOrEmpty(Model.HealthCondition.DisabilityDetails) ? "No additional details." : Model.HealthCondition.DisabilityDetails)</p>
                            </div>
                        }
                    </div>

                    @if (Model.HealthCondition?.HealthCheckUpDate != null)
                    {
                        <p class="animal-info-item"><strong>Last Check-up:</strong> @Model.HealthCondition.HealthCheckUpDate?.ToString("yyyy-MM-dd")</p>
                    }

                    @if (TempData["Message"] != null)
                    {
                        <div class="alert alert-success">@TempData["Message"]</div>
                        <script>
                            document.addEventListener("DOMContentLoaded", function () {
                                var adoptButton = document.getElementById("adoptButton");
                                if (adoptButton) adoptButton.style.display = "none";
                            });
                        </script>
                    }

                    <!-- Adopt Button -->
                    <div class="adopt-button-container">
                        <button id="adoptButton" onclick="showAdoptionForm()" class="btn btn-success adopt-button">Adopt Me</button>
                    </div>

                    <!-- Adoption Form -->
                    <div id="adoptionForm" style="display: none;" class="mt-3">
                        <h4>Adoption Form</h4>
                        <form method="post" action="@Url.Action("Adopt", "Adoption")">
                            <input type="hidden" name="animalId" value="@Model.AnimalId" />

                            <div class="mb-2">
                                <label for="adoptionDate">Adoption Date:</label>
                                <input type="date" name="adoptionDate" required class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                            </div>

                            <div class="mb-2">
                                <label for="adoptionTime">Adoption Time (8:00am - 06:00pm):</label>
                                <input type="time" name="adoptionTime" required class="form-control" min="08:00" max="18:00" />
                            </div>

                            <div class="mb-2">
                                <label for="userAddress">Your Address:</label>
                                <input type="text" name="userAddress" required class="form-control" />
                            </div>

                            @if (!ViewData.ModelState.IsValid)
                            {
                                <div class="alert alert-danger mt-2">
                                    <ul>
                                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                        {
                                            <li>@error.ErrorMessage</li>
                                        }
                                    </ul>
                                </div>
                            }

                            <button type="submit" class="btn btn-primary">Submit Adoption</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function showAdoptionForm() {
            fetch('@Url.Action("CheckLoginStatus", "Adoption")')
                .then(response => response.json())
                .then(data => {
                    if (!data.isLoggedIn) {
                        window.location.href = '@Url.Action("UserLogin", "Account")';
                    } else {
                        document.getElementById("adoptionForm").style.display = "block";
                        document.getElementById("adoptButton").style.display = "none";
                    }
                });
        }
    </script>
</body>
</html>