@model List<animal_shelter_app.Models.AnimalInformation>
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var uniqueSpecies = Model.Select(a => a.Species).Distinct().OrderBy(s => s).ToList();
}
<link href="https://fonts.googleapis.com/css?family=Cardo:400i|Rubik:400,700&display=swap" rel="stylesheet">
<div class="container my-4">
    @* This container is around the form and provides its initial spacing *@
    <style>
        /* Kartlık için CSS - Keep your existing styles here */
        :root {
            --d: 700ms;
            --e: cubic-bezier(0.19, 1, 0.22, 1);
            --font-sans: 'Rubik', sans-serif;
            --font-serif: 'Cardo', serif;
        }

        .page-content {
            display: grid;
            grid-gap: 1rem;
            padding: 1rem;
            max-width: 1024px;
            margin: 0 auto;
            font-family: var(--font-sans);
        }

        @@media (min-width: 600px) {
            .page-content {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @@media (min-width: 800px) {
            .page-content {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        .card {
            position: relative;
            display: flex;
            align-items: flex-end;
            overflow: hidden;
            padding: 1rem;
            width: 100%;
            height: 350px;
            text-align: center;
            color: whitesmoke;
            background-color: whitesmoke;
            box-shadow: 0 1px 1px rgba(0,0,0,0.1), 0 2px 2px rgba(0,0,0,0.1), 0 4px 4px rgba(0,0,0,0.1), 0 8px 8px rgba(0,0,0,0.1), 0 16px 16px rgba(0,0,0,0.1);
            border-radius: 10px;
        }

            .card:after {
                content: '';
                display: block;
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 200%;
                pointer-events: none;
                background-image: linear-gradient( to bottom, hsla(0, 0%, 0%, 0) 0%, hsla(0, 0%, 0%, 0.009) 11.7%, hsla(0, 0%, 0%, 0.034) 22.1%, hsla(0, 0%, 0%, 0.072) 31.2%, hsla(0, 0%, 0%, 0.123) 39.4%, hsla(0, 0%, 0%, 0.182) 46.6%, hsla(0, 0%, 0%, 0.249) 53.1%, hsla(0, 0%, 0%, 0.320) 58.9%, hsla(0, 0%, 0%, 0.394) 64.3%, hsla(0, 0%, 0%, 0.468) 69.3%, hsla(0, 0%, 0%, 0.540) 74.1%, hsla(0, 0%, 0%, 0.607) 78.8%, hsla(0, 0%, 0%, 0.668) 83.6%, hsla(0, 0%, 0%, 0.721) 88.7%, hsla(0, 0%, 0%, 0.762) 94.1%, hsla(0, 0%, 0%, 0.790) 100% );
                transform: translateY(-50%);
                transition: transform calc(var(--d) * 2) var(--e);
            }

        .content {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            padding: 1rem;
            transition: transform var(--d) var(--e);
            z-index: 1;
        }

            .content > * + * {
                margin-top: 1rem;
            }

        .title {
            font-size: 1.3rem;
            font-weight: bold;
            line-height: 1.2;
        }

        .copy {
            font-family: var(--font-serif);
            font-size: 1rem;
            font-style: italic;
            line-height: 1.35;
        }

        .btn {
            cursor: pointer;
            margin-top: 1.5rem;
            padding: 0.75rem 1.5rem;
            font-size: 0.65rem;
            font-weight: bold;
            letter-spacing: 0.025rem;
            text-transform: uppercase;
            /* Initial button colors handled below */
            border: none;
            border-radius: 20px;
        }

            .btn:focus {
                outline: 1px dashed yellow;
                outline-offset: 3px;
            }

        /* Kart hover efektleri - Keep your existing styles here */
        @@media (hover: hover) {
            .card:after {
                transform: translateY(0);
            }

            .content {
                transform: translateY(calc(100% - 4.5rem));
            }

                .content > *:not(.title) {
                    opacity: 0;
                    transform: translateY(1rem);
                    transition: transform var(--d) var(--e), opacity var(--d) var(--e);
                }

            .card:hover,
            .card:focus-within {
                align-items: center;
            }

                .card:hover:after,
                .card:focus-within:after {
                    transform: translateY(-50%);
                }

                .card:hover .content,
                .card:focus-within .content {
                    transform: translateY(0);
                }

                    .card:hover .content > *:not(.title),
                    .card:focus-within .content > *:not(.title) {
                        opacity: 1;
                        transform: translateY(0);
                        transition-delay: calc(var(--d) / 8);
                    }
        }

        /* --- Styles for the Filtration Bar --- */
        #filter-container {
            position: relative;
            width: 100%;
            margin: 20px auto;
            max-width: 1000px; /* Original was 800px */
        }

        #filterForm {
            background: linear-gradient(to right, #e0dca5, #cfe0a5, #e0cba5);
            padding: 10px 20px; /* Original was 20px */
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            position: relative;
            z-index: 200;
            opacity: 1;
            will-change: position, opacity, backdrop-filter;
        }

        /* Sticky filter class applies when scrolled */
        .sticky-filter {
            position: fixed !important;
            top: 0; /* Set dynamically by JS */
            left: 50% !important;
            transform: translateX(-50%) !important;
            width: 95% !important; 
            max-width: 1000px !important;
            backdrop-filter: blur(3px) !important;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15) !important;
            z-index: 990 !important;
            background: linear-gradient(to right, rgba(224, 220, 165, 0.9), rgba(207, 224, 165, 0.9), rgba(224, 203, 165, 0.9)) !important;
            opacity: 0.30 !important;
        }

        .sticky-filter:hover {
            opacity: 1 !important;
            backdrop-filter: none !important;
        }

        #filter-placeholder {
            display: none;
            width: 100%;
        }
        /* --- End Styles for the Filtration Bar --- */


        /* Açılır menü stilleri */
        .form-select {
            background-color: #f5f5f5;
            color: #000000;
            border: 1px solid #7c9c62;
            outline: none;
        }

            /* Açılır menü seçenekleri */
            .form-select option {
                background-color: #f5f5f5;
                color: #000000;
            }

                /* Hover durumunda yeşil arka plan ve beyaz yazı */
                .form-select option:hover {
                    background-color: #7c9c62 !important;
                    color: white !important;
                }

            /* Açılır menüde seçili görünen değer için */
            .form-select:focus option:checked {
                background-color: #7c9c62 !important;
                color: white !important;
            }

        /* Background styles - Keep your existing styles here */
        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('/images/ExploreAnimals_Background.jpg') no-repeat center center/cover;
            background-size: 40%; /* Resmi küçültme  */
            background-repeat: repeat; /* Resmi her iki yönde tekrarlama */
            filter: blur(1.5px);
            z-index: -2;
        }

        body::after {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.6);
            z-index: -1;
        }
        /* Apply ve Clear Filter butonları için Yeşil renk - Keep your existing styles here */
        .btn-apply, .btn-clear {
            background-color: #7c9c62; /* Yeşil arka plan */
            color: white;
        }

            .btn-apply:hover, .btn-clear:hover {
                background-color: #6b8f52; /* Hover durumunda biraz daha koyu yeşil */
            }

        /* View Details butonu için Siyah renk */
        .btn-view-details {
            background-color: black; /* Siyah arka plan */
            color: white;
        }

            .btn-view-details:hover {
                background-color: #333; /* Hover durumunda daha koyu siyah */
            }

            /* Focus durumları */
            .btn-apply:focus, .btn-clear:focus, .btn-view-details:focus {
                outline: 1px dashed yellow;
                outline-offset: 3px;
            }

    </style>

    @* Your existing Filter Form HTML *@
    @* The form is now wrapped in a container with id="filter-container" for easier JS targeting *@
    <div id="filter-container">
        <form id="filterForm" method="get" action="@Url.Action("Index", "Home")">
            <div class="row align-items-end gy-2">
                <div class="col-sm-3">
                    <label for="species" class="form-label">Species</label>
                    <select class="form-select" id="species" name="species">
                        <option value="">All</option>
                        @foreach (var species in uniqueSpecies)
                        {
                            <option value="@species">@species</option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    <label for="neutered" class="form-label">Neutering Status</label>
                    <select class="form-select" id="neutered" name="neutered">
                        <option value="">All</option>
                        <option value="true">Neutered</option>
                        <option value="false">Not Neutered</option>
                    </select>
                </div>
                <div class="col-sm-3">
                    <label for="adopted" class="form-label">Adoption Status</label>
                    <select class="form-select" id="adopted" name="adopted">
                        <option value="">All</option>
                        <option value="true">Adopted</option>
                        <option value="false">Not Adopted</option>
                    </select>
                </div>
                <div class="col-sm-3">
                    <label for="animal_gender" class="form-label">Gender</label>
                    <select class="form-select" id="animal_gender" name="animal_gender">
                        <option value="">All</option>
                        <option value="0">Female</option>
                        <option value="1">Male</option>
                    </select>
                </div>
                <div class="col-sm-3">
                    <label for="disability_status" class="form-label">Disability Status</label>
                    <select class="form-select" id="disability_status" name="disability_status">
                        <option value="">All</option>
                        <option value="false">No</option>
                        <option value="true">Yes</option>
                    </select>
                </div>
                <div class="col-sm-3">
                    <label for="chronic_disease_status" class="form-label">Chronic Disease</label>
                    <select class="form-select" id="chronic_disease_status" name="chronic_disease_status">
                        <option value="">All</option>
                        <option value="0">Temporary</option>
                        <option value="1">Permanent</option>
                    </select>
                </div>
                <div class="col-sm-3">
                    <label for="animal_age_range" class="form-label">Age Range</label>
                    <select class="form-select" id="animal_age_range" name="animal_age_range">
                        <option value="">All</option>
                        <option value="0-1">0-1</option>
                        <option value="2-3">2-3</option>
                        <option value="4-5">4-5</option>
                        <option value="6-more">6+</option>
                    </select>
                </div>
                <div class="col-sm-3 d-flex gap-2">
                    <button type="submit" class="btn btn-apply">Apply</button>
                    <button type="button" class="btn btn-clear btn-sm" id="clearFiltersBtn">Clear Filters</button>
                </div>
            </div>
        </form>
        <div id="filter-placeholder" class="filter-placeholder"></div>
    </div>
</div> @* Closing div for container my-4 around the form *@


@* The container div below holds the main content like animal cards *@
<div class="container">
    @* This is the container for the main content below the form *@
    <h2 class="text-center mb-4">@ViewBag.Filter</h2>

    @if (Model != null && Model.Any())
    {
        <div class="page-content">
            @foreach (var animal in Model)
            {
                <div class="card" style="@(!string.IsNullOrEmpty(animal.AnimalImage) ? $"background-image: url('{animal.AnimalImage}'); background-size: cover; background-position: center;" : "background-color: #f0f0f0;")">
                    <div class="content">
                        <h2 class="title">@animal.Species</h2>
                        <p class="copy">ID: @animal.AnimalId</p>
                        <p class="copy">Age: @animal.AnimalAge</p>
                        <p class="copy">Gender: @(animal.AnimalGender ? "Female" : "Male")</p>
                        <a asp-action="SpecificAnimal" asp-controller="Animal" asp-route-id="@animal.AnimalId" class="btn btn-view-details">
                            View Details
                        </a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center text-muted">No animals available.</p>
    }
</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const filterForm = document.getElementById('filterForm');
            const filterPlaceholder = document.getElementById('filter-placeholder');
            const navbar = document.querySelector('.navbar');

            if (!filterForm || !filterPlaceholder || !navbar) {
                console.error("Required elements not found!");
                return; // Exit if elements are missing
            }

            // Get navbar height
            const navHeight = navbar.offsetHeight;


            requestAnimationFrame(function() {
                const formRect = filterForm.getBoundingClientRect();
                const formTop = formRect.top + window.scrollY; // Top position relative to document
                const formHeight = formRect.height; // Height including padding and border

                const scrollThreshold = formTop - navHeight;

                function handleScroll() {
                    const shouldStick = window.scrollY >= scrollThreshold;

                    if (shouldStick) {
                        filterForm.classList.add('sticky-filter');
                        // Dynamically set the top position based on navbar height
                        filterForm.style.top = navHeight + 8 + 'px';
                        filterPlaceholder.style.display = 'block';
                        filterPlaceholder.style.height = formHeight + 'px';


                    } else {
                        // Return to normal flow
                        filterForm.classList.remove('sticky-filter');
                        filterForm.style.top = '';
                        filterPlaceholder.style.display = 'none';
                        filterPlaceholder.style.height = '';
                    }
                }

                // Add scroll listener
                window.addEventListener('scroll', handleScroll);
                handleScroll();

                // Handle window resize: recalculate placeholder height if filter is sticky
                window.addEventListener('resize', function() {
                    const currentFormHeight = filterForm.getBoundingClientRect().height;
                    if (filterForm.classList.contains('sticky-filter')) {
                        filterPlaceholder.style.height = currentFormHeight + 'px';
                    }
                });

            });

            const params = new URLSearchParams(window.location.search);

            // Set initial filter values
            filterForm.querySelectorAll('select').forEach(select => {
                const paramValue = params.get(select.name);
                if (paramValue !== null) { // Use null check for empty string values
                    select.value = paramValue;
                }
            });

            // Clear filters button
            document.getElementById('clearFiltersBtn').addEventListener('click', function() {
                filterForm.querySelectorAll('select').forEach(select => select.value = '');
                filterForm.submit();
            });
        });
    </script>
}